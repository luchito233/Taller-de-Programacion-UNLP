ENUNCIADO:

2.- Implementar un programa que procese información de propiedades que están a la venta
en una inmobiliaria.
Se pide:

a) Implementar un módulo para almacenar en una estructura adecuada, las propiedades
agrupadas por zona. Las propiedades de una misma zona deben quedar almacenadas
ordenadas por tipo de propiedad. Para cada propiedad debe almacenarse el código, el tipo de
propiedad y el precio total. De cada propiedad se lee: zona (1 a 5), código de propiedad, tipo
de propiedad, cantidad de metros cuadrados y precio del metro cuadrado. La lectura finaliza
cuando se ingresa el precio del metro cuadrado -1.

b) Implementar un módulo que reciba la estructura generada en a), un número de zona y un tipo de
propiedad y retorne los códigos de las propiedades de la zona recibida y del tipo recibido. 



CODIGO:

program Punto2;
type
  str40 = string[40];
  
  rango5 = 1..5;
  
  propiedad = record
    zona:Rango5;
    codigo:integer;
    tipoPropiedad:str40;
    cantMetrosCuadrados:real;
    precioXmetroCuadrado:real;
  end;
  
  propiedad_a_almacenar= record
    codigo:integer;
    tipoPropiedad:str40;
    precioTotal:real;
  end;
  
  lista = ^nodo;
  nodo = record
    dato:propiedad_a_almacenar;
    sig:lista;
  end;
  
  vZonas = array[Rango5] of lista;
  
// PROCEDIMIENTOS

procedure inicializaVector(var v:vZonas);
var
  i:integer;
begin
  for i:= 1 to 5 do v[i]:= nil;
end;

procedure leerPropiedad(var p:propiedad);
begin
  writeln('ingrese el precio por metro cuadrados');
  readln(p.precioXmetroCuadrado);
  if( p.precioXmetroCuadrado <> -1 )then 
  begin
    writeln('ingrese la cantidad de metros cuadrados');
    readln(p.cantMetrosCuadrados);
    writeln('ingrese la zona de la propiedad');
    readln(p.zona);
    writeln('ingrese el tipo de la propiedad');
    readln(p.tipoPropiedad);
    writeln('ingrese el codigo de la propiedad');
    readln(p.codigo);
  end;
end;

procedure dato_propied_almace(p:propiedad; var dato:propiedad_a_almacenar);
begin
  dato.codigo:=p.codigo;
  dato.tipoPropiedad:=p.tipoPropiedad;
  dato.precioTotal:=p.cantMetrosCuadrados * p.precioXmetroCuadrado;
end;

procedure insertarOrdenado(var l:lista; dato:propiedad_a_almacenar);
var
  aux,ant,act:lista;
begin
  new(aux);
  aux^.dato:=dato;
  aux^.sig:=nil;
  if(l = nil) then l:=aux
  else
    act:=l;
    while ( act <> nil ) and (act^.dato.tipoPropiedad < aux^.dato.dato_propied_almace) do
    begin
      ant:=act;
      act:=act^sig;
    end;
  if(l = act) then
  begin
    aux^.sig:=l;
    l:=aux
  end
  else
    act^.sig:= aux;
    aux^sig:= act;
end;

procedure cargarVector(var v:vZonas);
var
  propie:propiedad;
  dato_propied_almace:propiedad_a_almacenar;
begin
  leerPropiedad(propie);
  while(propie.precioXmetroCuadrado <> -1) do 
  begin
    datos_a_almacenar(propie,dato_propied_almace);
    insertarOrdenado(v[propie.zona],dato_propied_almace);
    leerPropiedad(propie);
  end;
end;

procedure recorrerVector(v:vZonas; z:Rango5; tipoP:str40);
var
  l:lista;
begin
  l:=v[z];
  while(l <> nil) do 
  begin
    if(tipoP = l^.dato.tipoProp) then writeln(l^.dato.codigo);
    l:=l.sig;
  end;
end;
  
// PROGRAMA PRINCIPAL
var
  vectorL:vZonas
  zonas:Rango5;
  tipoProp:str40;
begin
  inicializaVector(vectorL);
  cargarVector(vectorL);
  writeln('ingrese una zona');
  readln(zonas);
  writeln('ingrese un tipo de propiedad');
  readln(tipoProp);
  recorrerVector(vectorL,zonas,tipoProp);
end.
